define host{
	use		linux-server
	host_name	collector.torproject.org
	alias		Primary CollecTor instance
	address		collector.torproject.org
	hostgroups	collectors,collector-bridgedescs,collector-archives
	}

define host{
	use		linux-server
	host_name	collector2.torproject.org
	alias		Secondary CollecTor instance
	address		collector2.torproject.org
	hostgroups	collectors
	}

define hostgroup{
	hostgroup_name	collectors
	alias		CollecTor Instances
	}

define hostgroup{
	hostgroup_name	collector-archives
	alias		CollecTor Instances with Archive
	}

define hostgroup{
	hostgroup_name	collector-bridgedescs
	alias		CollecTor Instances with Bridge Descriptors
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	ICMPv4 Echo
	check_command		check_ping_4!200.0,20%!600.0,60%	; The command used to monitor the service
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

# AWS doesn't have IPv6
#define service{
#	use			generic-service
#	hostgroup_name		collectors
#	service_description	ICMPv6 Echo
#	check_command		check_ping!200.0,20%!600.0,60% -6	; The command used to monitor the service
#	check_interval	5		; Check the service every 5 minutes under normal conditions
#	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
#	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	HTTP Redirect
	check_command		check_http_redirect
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Root index page
	check_command		check_https_url_content!/!Index of
	check_interval	15		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collector-archives
	service_description	Archive page linked
	check_command		check_https_url_content!/!<a href="archive/">archive/</a>
	check_interval	15		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Index page linked
	check_command		check_https_url_content!/!<a href="index/">index/</a>
	check_interval	15		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Recent page linked
	check_command		check_https_url_content!/!<a href="recent/">recent/</a>
	check_interval	15		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collector-archives
	service_description	Archive index page
	check_command		check_https_url_content!/archive/!Index of
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Index index page
	check_command		check_https_url_content!/index/!Index of
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Recent index page
	check_command		check_https_url_content!/recent/!Index of
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
	use			generic-service
	hostgroup_name		collectors
	service_description	Index age
	check_command		check_collector_index_created
	check_interval	5		; Check the service every 5 minutes under normal conditions
	retry_interval	1		; Re-check the service every minute until its final/hard state is determined
	}

define service{
        use                     generic-service
        hostgroup_name          collector-bridgedescs
        service_description     Latest bridgedescs update
        check_command           check_collector_latest_recent_bridgedescs
        check_interval  10              ; Check the service
        retry_interval  1               ; Re-check the servi
        }


define service{
        use                     generic-service
        hostgroup_name          collectors
        service_description     Latest exitlists update
        check_command           check_collector_latest_recent_exitlists
        check_interval  10              ; Check the service
        retry_interval  1               ; Re-check the servi
        }


define service{
        use                     generic-service
        hostgroup_name          collectors
        service_description     Latest relaydescs update
        check_command           check_collector_latest_recent_relaydescs
        check_interval  10              ; Check the service
        retry_interval  1               ; Re-check the servi
        }
